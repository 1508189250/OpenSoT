#################################################################
## CONFIGURATION FILE FOR sot_VelKinCon                         #
#################################################################
## Note! The module will quit if it won't find this file        #
#################################################################

#################################################################
#[SOT]
#################################################################

#################################################################
# use joint impedance control for upper body?                   #
#################################################################

left_arm_impedance_control true
right_arm_impedance_control true
torso_impedance_control true



#################################################################
# which is the frequency to use for the SoT? (1/dT , dT is [s]) #
#################################################################

dT 0.025



#################################################################
# use 3 stacks or two?                                          #
#                                                               #
# If using three, first task is used for foot placement and     #
# precise CoM control                                           #
#################################################################

use_3_stacks false                                                  


#################################################################
# what is the maximum velocity [rad/sec] for the joints?        #
#################################################################

max_joint_velocity 0.35


#################################################################
# what is the orientation error gain?                           #
#                                                               #
# the orientation gain is used to weight orientation error      #
# over position                                                 #
# eRWrist = yarp::math::cat(eRWrist_p,                          #
#               -ORIENTATION_ERROR_GAIN*eRWrist_o);             #
#################################################################

orientation_error_gain 1.0

#################################################################
# postural weight coefficient                                   #
#                                                               #
# it weights the postural task and the min effort task in a     #
# linear way. When 0.0 the last task is all min effort, when    #						#
# 1.0 the last task is all postural. Used for last_task_type 2. #
#################################################################

postural_weight_coefficient 0.1

#################################################################
# mineffort weight coefficient                                  #
#                                                               #
# it is a scalar multiplying the mineffort gradient.            #
# Especially important when using last_stack_type 1 and 2       #
#################################################################

mineffort_weight_coefficient 0.7

#################################################################
# velocity bounds scale	                                        #
#                                                               #
# it is a scalar multiplying the joint max velocities in        #
# Cartesina tasks.						#
# 							        #
#################################################################

mineffort_weight_coefficient 0.7

#################################################################
#[SOLVER]
#################################################################
# qpOases Maximum Number of Working Set recalculations          #
#                                                               #
# from qpOases manual:                                          #
# The integer argument nWSR specifies the maximum number of     #
# working set recalculations to be performed during the initial #
# homotopy                                                      #
#                                                               #
# If too low, the QP can fail to converge.                      #
#                                                               #
# The three values below are used for three stacks. The third   #
# might not get used if you have a stack with only 2 tasks      #
#################################################################

qpOases_nWSR0   32
qpOases_nWSR1   32
qpOases_nWSR2   32


#################################################################
# qpOases Regularisation                                        #
#                                                               #
# regularisation in qpOases is equivalent to using dumped least #
# squared in a normal pseudoinverse solution. It can be seen as #
# a Levenberg-Marquardt regularisation.                         #
#                                                               #
# You can set whether to enable regularisation for each QP in   #
# the stack, how many normalisation steps, and how big is the   #
# regularisation term (it multiplies the default which is       #
# epsRegularisation = 5.0e3*EPS , where                         #
# EPS=2.221e-16 for 64bit systems and                           #
# EPS=1.193e-07 for 32bit systems   (qpOASES/Constants.hpp)     #
#                                                               #
# from qpOases manual:                                          #
# Automatic Regularisation Procedure                            #
# ..[is a] regularisation procedure that is computationally     #
# cheap and works well for many problems. This procedure first  #
# adds a small multiple of the identity matrix to the Hessian   #
# and solves the corresponding regularised QP. Afterwards, a    #
# few post-iterations are performed that improve solution       #
# accuracy signigificantly over a plain regularisation at virtu-#
# ally now extra computational cost. If your QP involves a      #
# Hessian matrix that is only positive semi-definite, this regu-#
# larisation scheme is used automatically , i.e. without any    #
# change in the constructor or other function calls, whenever   #
# the option enableRegularisation is set to BT_TRUE (true here) #
#################################################################

qpOases_enableRegularisation0   true
qpOases_enableRegularisation1   true
qpOases_enableRegularisation2   true

qpOases_epsRegularisationMultiplier0    2e2
qpOases_epsRegularisationMultiplier1    2e2
qpOases_epsRegularisationMultiplier2    2e2
